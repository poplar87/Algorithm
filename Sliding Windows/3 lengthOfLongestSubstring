//Given a string, find the length of the longest substring without repeating characters. 
//
// 
// Example 1: 
//
// 
//Input: "abcabcbb"
//Output: 3 
//Explanation: The answer is "abc", with the length of 3. 
// 
//
// 
// Example 2: 
//
// 
//Input: "bbbbb"
//Output: 1
//Explanation: The answer is "b", with the length of 1.
// 
//
// 
// Example 3: 
//
// 
//Input: "pwwkew"
//Output: 3
//Explanation: The answer is "wke", with the length of 3. 
//             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
// 
// 
// 
// 
// Related Topics Hash Table Two Pointers String Sliding Window



//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int[] charArray = new int[128];
        int j = 0, maxl = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (charArray[c - 'a'] > 0) {
                maxl = Math.max(maxl, i - j);
                j = charArray[c - 'a'];
            }
            charArray[c - 'a'] = i + 1;
        }
        return maxl==0?s.length():maxl;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
